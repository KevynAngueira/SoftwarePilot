[AnafiPiloting]
	Wrapper for the Parrot Olympe flight control methods
	
	...
	
	Attributes
	----------
	drone : olympe.Drone
		the drone object
	action_queue : str[]
		queue of all the actions to be executed
		
	Methods
	-------
	takeoff(queue)
		initiates drone takeoff
	land(queue)
		initiates drone landing
	wait_until_state(state_type, state, timeout)
		wait until state is reached
	move_by(x, y, z, angle, wait, queue)
		moves the drone a given number of meters or rotates it to a set angle
	move_to(lat, lon, alt, orientation_mode, heading, wait, queue)
		moves the drone to given waypoint or rotates it to a set angle from north
	cancel_move_by()
		cancels move_by order
	cancel_move_to
		cancels move_to order
	add_action(action)
		adds {action : str} to the {action queue : str[]}
	remove_action(index)
		removes and returns the {action : str} from at position {index : int} from {action_queue : str[]}
	clear_actions()
		clears the {action_queue : str[]}
	execute_actions(num, a_sync)
		Executes the first {num : int} actions from {action_queue : str[]} in order.
	
	[__init__(drone_object)]
		Parameters
		----------
		drone_object : olympe.Drone
			the drone object
	
	[takeoff(queue)]
		Initiates drone takeoff. If {queue : bool} is True send to {action_queue : str[]} instead. 
		
		Parameters
		----------
		queue : bool, optional
			if True send to {action_queue : str[]}, else False execute. (default = False)
	
	[land(queue)]
		Initiates drone landing. If {queue : bool} is True send to {action_queue : str[]} instead.
		
		Parameters
		----------
		queue : bool, optional
			if True send to {action_queue : str[]}, else False execute. (default = False)
	
	[wait_until_state(state_type, state, timeout)]
		Sends a wait until given {state : str} instruction to the {action_queue : str[]}
		
		Parameters
		----------
		state_type : str
			the type of state to be waited for:
			- move_by
			- move_to
		state : str
			the state to be waited for:
			move_by:
			- "landed"
			- "takingoff"
			- "landing"
			- "hovering"
			- "flying"
			move_to
			- "done"
			- "running"
			- "cancelled"
		timeout : int
			the time in seconds to wait for state
		
	[move_by(x, y, z, angle, wait)]
		Moves the drone a given number of meters or rotates it to a set angle.
		If {queue : bool} is True send to {action_queue : str[]} instead.
		
		Parameters
		----------
		x : float
			the movement in the x axis, forwards and backwards, in meters
		y : float
			the movement in the y axis, left and right, in meters
		z : float
			the movement in the z axis, up and down, in meters
		angle : float
			the rotation in radians
		wait : bool, optional
			if true waits for completion before sending the next instruction (default = False)
		queue : bool, optional
			if True send to {action_queue : str[]}, else False execute. (default = False)
			
	[move_to(lat, lon, alt, orientation_mode, heading, wait)]
		Moves the drone to given waypoint or rotates it to a set angle from north.
		If {queue : bool} is True send to {action_queue : str[]} instead.
		
		Parameters
		----------
		lat : float
			the latitude to travel to
		lon : float
			the longitude to travel to
		alt : float
			the altitude to travel to
		orientation_mode : str, optional
			the orientation mode (default = "NONE")
			- "NONE"
			- "TO_TARGET" (looks at the direction of the given location)
			- "HEADING_START" (Changes orientation before travelling)
			- "HEADING_DURING" (Changes orientation during travel)
		heading : float, optional
			the target orientation dictated by degrees from north (default = 0)
			only used if orientation_mode is "HEADING_START" or "HEADING_DURING"
		wait : bool, optional
			if true waits for completion before sending the next instruction (default = False)
		queue : bool,optional
			if True send to {action_queue : str[]}, else False execute. (default = False)
	
	[cancel_move_by()]
		cancels move_by order
		
	[cance_move_to()]
		cancels move_to order
